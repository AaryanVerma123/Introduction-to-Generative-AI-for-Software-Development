class GraphTSPMediumGraph(Graph):
    def tsp_medium_graph(self, start):
        import time

        def calculate_tour_length(tour):
            length = 0
            for i in range(len(tour) - 1):
                length += self.graph[tour[i]][tour[i + 1]]
            length += self.graph[tour[-1]][tour[0]]
            return length

        def time_limited_two_opt(tour, time_limit=1.0):
            start_time = time.time()
            best = tour
            best_len = calculate_tour_length(best)
            n = len(tour)
            improved = True

            while improved and time.time() - start_time < time_limit:
                improved = False
                for i in range(1, n - 2):
                    for j in range(i + 1, n):
                        if time.time() - start_time > time_limit:
                            return best
                        if j - i == 1:
                            continue
                        new_tour = best[:i] + best[i:j][::-1] + best[j:]
                        new_len = calculate_tour_length(new_tour)
                        if new_len < best_len:
                            best = new_tour
                            best_len = new_len
                            improved = True
                if not improved:
                    break
            return best

        path = [start]
        visited = set(path)
        current_node = start

        while len(visited) < len(self.graph):
            nearest = min(
                ((n, d) for n, d in self.graph[current_node].items() if n not in visited),
                key=lambda x: x[1],
                default=(None, float('inf'))
            )[0]
            if nearest is None:
                break
            path.append(nearest)
            visited.add(nearest)
            current_node = nearest

        optimized_path = time_limited_two_opt(path, time_limit=0.8)
        total_dist = calculate_tour_length(optimized_path)
        return total_dist, optimized_path
